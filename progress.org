#+CATEGORY: cgrlib
* cgrlib progress
* ---------------------------- Dated notes -----------------------------
* <2013-11-17 Sun> Created this document
* <2014-03-19 Wed> A note about setuptools
  - You can have weird installation errors if this isn't updated.  As
    usual, use pip install --upgrade setuptools to get it up to date.
* ----------------------------- TODO list ------------------------------
* How to increment a revision
** Merge with master
   1. git checkout master
   2. git merge feature
** Increment the version number in setup.py
** Test version
   1. Run make install
   2. Run cgr-capture in an empty directory.  Should fail gracefully.
   3. Run make upload
** Upload to github
* makefile
** DONE Add target to upload to pypi
   - I have a username and password already.  I created a pypirc file
     on my work machine.  I added a makefile target to register the
     package...I just don't have a decent connection to do it with.
* cgr-cal script
** DONE Add checks for slope and offset values
   - Offset counts should be within 1V of zero, and offsets should be
     within 10% of 45mV / count.  Fail the calibration and don't write
     any calibration factors if this happens.  These checks should be
     added in cgr_cal in get_offsets and get_slopes.
   - Merge feature branch with master when you're done
** DONE Configure logging via the configuration file
   - See cgr_capture for how to do this.
** DONE Offset values need to be written to both the file and eeprom
   - Do this by adding fields to the caldict.  I can add the fields
     chA_1x_eeprom, chA_10x_eeprom, chB_1x_eeprom, chB_10x_eeprom.
*** DONE This 5x factor for eeprom offsets needs a name
    - Replace all these hardcoded values
*** DONE get_offsets in cgr_cal needs to add eeprom dict items
*** DONE write_cal in utils needs to write eeprom values
*** DONE load_cal in utils needs to read eeprom and store values
    - The exception is thrown when the calibration file can't be
      found.  We should read the eeprom values in the exception.
      Assign the eeprom values to the appropriate "live" keys in the
      calibraton dictionary -- the 1x_offset and 10x_offset slots.
      These are actually used to correct data.
** DONE Test new cgr-cal with new plotting code
** DONE What is this output file?  
** DONE Add support for averaging while measuring slopes
** DONE Add makefile to automate install and reindent steps
   - This will give me a place to write comments about the reindent
     and installation scripts.  As long as the makefile isn't in the
     manifest, it won't be added to the package.
** DONE Add way to escape offset calibration
** DONE Config file should specify which voltage to ask for
** DONE Calibration dates need to be added to caldict
   - caldict members _caldate should be added for each calibration
     coefficient.  For example, since there's a chA_1x_offset member,
     there should be a chA_1x_offset_caldate member.  If the member
     has never been calibrated, the caldate should be 'none'.  When
     the calibration coefficient is used, there should be a warning
     that the coefficient has never been updated from its default
     value.
** DONE There should be a file to keep last port
   - Should have the last port connected to.  This could be something
     like cgr-session.pkl.
** DONE Custom serial port list should be added to config
** DONE cal file should be set in config file
   - Right now it's specified in the utils.py file.  Its name is cgrcal.pkl.
** DONE utils.load_cal() should take a filename
** DONE trigdict needs to be set manually for calibration
   - Trigger source needs to be manual, and points needs to be set to
     whatever -- 500.  This should be pulled out of the configuration
     file.
** DONE get_offsets function should just get offsets specified by cfg
   - Right now the function runs through both gain settings.  I think
     a better way is to only use the gain setting set in the config
     file.  
* Installing with cygwin
** Windows 7 -- 32bit
*** Download cygwin setup executable
    - Download setup-x86.exe from http://cygwin.com/ (download it
      instead of just running it -- you'll want to run it multiple
      times).  I tested this with setup.exe version 2.850 (32 bit).
*** Follow instructions to install from internet
    - Install to C:\cygwin for all users
    - Download installation files to C:\cygstore (this doesn't really matter).
    - Use the https://cygwin.com/mirrors.html site to choose a mirror
      near you.
*** Install default packages, plus the following
    1. gnuplot
    2. python (2.7 branch)
    3. python-numpy (this shouldn't have to be installed with the
       package manager -- it should be able to be pulled in with the
       package requirements.  But gnuplot-py requires it and doesn't
       pull it in itself.)
    4. lapack (same note as for numpy)
    5. liblapack-devel
    6. xorg-server
    7. xinit
    8. xorg-docs
*** Start the cygwin terminal
    - This creates your home directory and some useful configuration
      files.
*** Create a .startxwinrc file
    - touch ~/.startxwinrc
    - Suppresses the creation of an xterm on startup
*** Edit the .bashrc file to set the display
    - echo 'export DISPLAY=:0' >> ~/.bashrc
*** Re-read the .bashrc file
    - bash
*** Install pip
    1. Download get-pip.py from
       http://pip.readthedocs.org/en/latest/installing.html.  Save it
       to C:\cygwin\usr\get-pip.py
    2. cd /usr
    3. python get-pip.py
*** Repair numpy
    - See http://centilemma.com/windows/cygwin.html for more details.
    1. cp /usr/lib/lapack/cygblas-0.dll /usr/bin
    2. cp /usr/lib/lapack/cyglapack-0.dll /usr/bin
    3. cygcheck
       /lib/python2.7/site-packages/numpy/linalg/lapack_lite.dll (to
       check on the success.  There should be no errors like:
       cygcheck: track_down: could not find cyglapack-0.dll)
    - A note about cygcheck.  Use cygcheck to show the installed
      version of a package and to verify its integrity.
*** Install gnuplot-py
    - This is a bad system right now.
    - pip install --allow-external gnuplot-py --allow-unverified
      gnuplot-py gnuplot-py
*** Install cgrlib
    - pip install cgrlib
*** Start X
    - startxwin
*** Try capturing a waveform
    - cgr-capture
* How to increment a revision
** Merge with master

** Increment the version number in setup.py
** Test version
   1. Run make install
   2. Run cgr-capture in an empty directory.  Should fail gracefully.
   3. Run make upload
** Upload to github
* makefile
** DONE Add target to upload to pypi
   - I have a username and password already.  I created a pypirc file
     on my work machine.  I added a makefile target to register the
     package...I just don't have a decent connection to do it with.
* cgr-capture script
** DONE Configure logging via the configuration file
   - This is a bit of a problem, since the logger is a global
     resource.  I need to set a global variable inside a function.
     There's a way to do this, I just can't remember it.m
** Offset calibration values should be read out of eeprom
   - Only if calibration file does not exist.  The cgr object needs
     to be passed to the function that gets the calibration values.
     And this function needs to fill in the default offsets in the
     dictionary using values pulled from the device.
   - I realize that the offset value depends on the slope.  This is
     necessary to have 511 counts be 0V.  But the slope value doesn't
     usually need calibration.  The slope is 44.5 mV/count.  If I
     store the calibration value as straight mV, I would divide by
     44.5 before using the value in calculations.  Need to verify
     what uncalibrated offsets are.
*** TODO Decide how the offset number should be formatted
    - The cgr stores offsets as 8-bit signed integers.  
** DONE config object passed to utils get_cgr()
** TODO What are good values for slope and offset?
   - I'm looking at an offset value of about 513 mV.  This is 11.3
     counts.  Let's say that the offset will be less than 1V, or 22
     counts.  I could either have the offset stored as fifth-counts,
     or as centivolts.  Of course, if the user actually calibrates,
     they'll get more precision.  I like fifthcounts, since then I
     don't have to keep the slope around.
** TODO Save data function should write timestamp to file
** DONE Custom serial port list should be added to the config
   - The config should have a connection section.  There should be a
     list of custom serial ports, and there should be a lastport
     variable.  This lastport variable will be written at runtime.
** DONE Write plotinit() function
   - Configures the plot, returns the plot object (gplot)
** DONE gplot object needs to be created in the main loop
   - This keeps the plot from being destroyed until the program is
     done.  This allows plotting the result of each average without
     destroying the plot.
** DONE What happens if cgr-capture is run from whatever directory?
   - Seems like I need to have a search routine for the config file.
   - Nice!  The script creates a default config file from wherever the
     script was called from!  This is exactly what I want!
** DONE Create savedata function
   - Unfortunately, the datafile will need to have a lot of metadata
     in it.  The saveddata function needs to take the config object as
     an argument, since I'll be specifying the save file name in
     there.
** DONE Calibration factor dates must be checked when used
   - If the dates are 'none' or more than a year apart, a warning
     should be raised.  See the caldict_default dictionary in utils.py
     for a list of all calibration factors and their associated dates.
   - I started doing this with get_cal_data() from utils.py.  This
     needs to be extended to the remaining calibration factors.
** DONE Cal file should be set in the config file
** DONE One command-line argument should be init file
   - The default should be cgr-capture.cfg, but it should accept
     alternates.
** DONE Check to see that averaging works
* howto
** TODO Document procedure for uploading new versions to pypi
** TODO Document installation with cygwin
*** Necessary packages:
    1. Gnuplot
    2. Python 2.7
** TODO Document installation within virtualenv
** TODO Document how to set up the logger
   - Note that there are two outputs for the logger -- the console and
     the logfile.  The logfile is set to cgrlog.log, and is produced
     in the same directory from which the cgr program is launched.
*** Configuring log messages
    - The cgr-cal and cgr-capture scripts allow the severity of log
      messages to be adjusted in their configuration files.  To
      suppress the terminal output of all log messages less severe
      than INFO, set the termlevel to info.
** DONE Set up the howto document
   - Set it up like boxcom's
* cgrlib
** TODO Handle errors better in utils.
   - The catch-all error handler has to print the name of the class a
     type came from.
** Write checks for slope and offset values in utils
*** TODO Write offset_ok function
    - Returns True if offset within OK range
*** TODO Write slope_ok function
    - Returns True if slope within certain limits
*** TODO Implement checks in cgr_cal get_offsets and get_slopes
** Get rid of calibration dates
   - The calibration dates made sense when we were just using a
     calibration file, but not now that we've decided to pull
     calibration factors out of eeprom.  We can not store calibration
     dates in eeprom.
*** DONE Get rid of caldate checks in utils.get_cal_data
*** DONE Get rid of dates in utils.caldict_default
*** DONE Don't set any caldates in cgr_cal.get_offsets
*** DONE Don't set any caldates in cgr_cal.get_slopes
** DONE Get rid of message delay
   - Do this after testing various delays.  Realize that you'll never
     get much faster than 10ms of delay.
   - This can't be done.  A message delay is necessary.
* setup.py script
** TODO Set up vagrant to test installations
*** TODO Install virtualbox
*** TODO Install vagrant
** DONE Where do the example scripts get copied upon install?
   - They get copied to usr/bin
** DONE Check to see if dependencies actually get updated
   - They do!  You just don't see all the output from the setup.py script.
** DONE Restructure project to have a tools directory
   - The tools directory will have the cgr-capture and cgr-cal
     scripts.  This will allow me to struture the project like
     pelican, and use the console scripts method to create
     executables.
** TODO Store the version number in a better way
   - I need to be able to print out the version number on the command line.
   - The fix may be here: http://stackoverflow.com/questions/458550/standard-way-to-embed-version-into-python-package
* readme file
** TODO Document how to set up gnuplot
*** Installing gnuplot.py
**** Using pip
     - pip install gnuplot-py
